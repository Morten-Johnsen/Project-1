}
#### WINDPOWER ####
#Wind power have been normalized to lie between 0-1, so we use the second transformation in the
#assigment to see if we can get a normal distribution:
lambda <- 0.5
D$pow.obs.norm.trans <- 2*log(D$pow.obs.norm^lambda/(1-D$pow.obs.norm)^(1-lambda))
qqplot(rnorm(length(D$pow.obs.norm.trans), mean = mean(D$pow.obs.norm.trans), sd = sd(D$pow.obs.norm.trans)), D$pow.obs.norm.trans)
#Fitting models to wind power:
dists <- testDistribution(c(NA,NA), NA, giveDistributions = T)
opt.parms <- matrix(NA, nrow = length(dists), ncol = 2)
for (i in 1:length(dists)){
opt.temp <- nlminb(start = c(1,0.5), objective = testDistribution,
x = D$pow.obs.norm,
distribution = dists[i],
lower = c(0,0))
opt.parms[i,] <- opt.temp$par
}
ggplot(D)+
geom_histogram(aes(x = pow.obs.norm)
, bins = 30)+
theme_bw()+
stat_function(fun = dnorm,   n = length(D$pow.obs.norm), args = list(mean = opt.parms[1,1], sd = opt.parms[1,2]))+
stat_function(fun = dgamma,  n = length(D$pow.obs.norm), args = list(shape = opt.parms[2,1], rate = opt.parms[2,2]))+
stat_function(fun = dbeta,   n = length(D$pow.obs.norm), args = list(shape1 = opt.parms[3,1], shape2 = opt.parms[3,2]))+
stat_function(fun = dnbinom, n = length(D$pow.obs.norm), args = list(size = opt.parms[4,1], prob = opt.parms[4,2]))
g.pow.obs
setwd("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1")
rm(list = ls())
library(lubridate)
library(tidyverse)
library(reshape)
library(stringr)
library(pheatmap)
#Retrieve data from the descriptive statistics script
##### TILPAS DEN HER TIL DEN COMPUTER DEER BRUGES
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
setwd("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/Statistical Modelling/Project-1/")
} else {
setwd("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1")
}
source("descriptiveStatistics.R")
testDistribution <- function(p, x, distribution = "Normal", giveDistributions = F){
if (giveDistributions == T){
NLL <- c("normal", "gamma", "beta", "negative binomial")
distribution = "none"
}
if (str_to_lower(distribution) == "normal"){
mu <- p[1]
sigma <- p[2]
NLL <- -sum(dnorm(x, mean = mu, sd = sigma, log = T))
}
if (str_to_lower(distribution) == "gamma"){
shape <- p[1]
rate <- p[2]
NLL <- -sum(dgamma(x, shape = shape, rate = rate, log = T))
}
if (str_to_lower(distribution) == "beta"){
#The beta distribution only ranges from [0;1] and thus it is
#exclusively relevant to the normalized wind power statistic
#and not the fitting of the other two parameters.
shape1 <- p[1]
shape2 <- p[2]
NLL <- -sum(dbeta(x, shape = shape1, shape2 = shape2, log = T))
}
if (str_to_lower(distribution) == "negative binomial"){
alpha <- p[1] #target number of succesfull trials
pi <- p[2] #probability of succes in each trial
NLL <- -sum(dnbinom(alpha, size = x, prob = pi, log = T))
}
return(NLL)
}
#### WINDPOWER ####
#Wind power have been normalized to lie between 0-1, so we use the second transformation in the
#assigment to see if we can get a normal distribution:
lambda <- 0.5
D$pow.obs.norm.trans <- 2*log(D$pow.obs.norm^lambda/(1-D$pow.obs.norm)^(1-lambda))
qqplot(rnorm(length(D$pow.obs.norm.trans), mean = mean(D$pow.obs.norm.trans), sd = sd(D$pow.obs.norm.trans)), D$pow.obs.norm.trans)
#Fitting models to wind power:
dists <- testDistribution(c(NA,NA), NA, giveDistributions = T)
opt.parms <- matrix(NA, nrow = length(dists), ncol = 2)
for (i in 1:length(dists)){
opt.temp <- nlminb(start = c(1,0.5), objective = testDistribution,
x = D$pow.obs.norm,
distribution = dists[i],
lower = c(0,0))
opt.parms[i,] <- opt.temp$par
}
ggplot(D)+
geom_histogram(aes(x = pow.obs.norm)
, bins = 30)+
theme_bw()+
stat_function(fun = dnorm,   n = length(D$pow.obs.norm), args = list(mean = opt.parms[1,1], sd = opt.parms[1,2]))+
stat_function(fun = dgamma,  n = length(D$pow.obs.norm), args = list(shape = opt.parms[2,1], rate = opt.parms[2,2]))+
stat_function(fun = dbeta,   n = length(D$pow.obs.norm), args = list(shape1 = opt.parms[3,1], shape2 = opt.parms[3,2]))+
stat_function(fun = dnbinom, n = length(D$pow.obs.norm), args = list(size = opt.parms[4,1], prob = opt.parms[4,2]))
g.pow.obs
rm(list = ls())
library(lubridate)
library(tidyverse)
library(reshape)
library(stringr)
library(pheatmap)
#Retrieve data from the descriptive statistics script
##### TILPAS DEN HER TIL DEN COMPUTER DEER BRUGES
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
setwd("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/Statistical Modelling/Project-1/")
} else {
setwd("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1")
}
source("descriptiveStatistics.R")
testDistribution <- function(p, x, distribution = "Normal", giveDistributions = F){
if (giveDistributions == T){
NLL <- c("normal", "gamma", "beta", "negative binomial")
distribution = "none"
}
if (str_to_lower(distribution) == "normal"){
mu <- p[1]
sigma <- p[2]
NLL <- -sum(dnorm(x, mean = mu, sd = sigma, log = T))
}
if (str_to_lower(distribution) == "gamma"){
shape <- p[1]
rate <- p[2]
NLL <- -sum(dgamma(x, shape = shape, rate = rate, log = T))
}
if (str_to_lower(distribution) == "beta"){
#The beta distribution only ranges from [0;1] and thus it is
#exclusively relevant to the normalized wind power statistic
#and not the fitting of the other two parameters.
shape1 <- p[1]
shape2 <- p[2]
NLL <- -sum(dbeta(x, shape = shape1, shape2 = shape2, log = T))
}
if (str_to_lower(distribution) == "negative binomial"){
alpha <- p[1] #target number of succesfull trials
pi <- p[2] #probability of succes in each trial
NLL <- -sum(dnbinom(alpha, size = x, prob = pi, log = T))
}
return(NLL)
}
#### WINDPOWER ####
#Wind power have been normalized to lie between 0-1, so we use the second transformation in the
#assigment to see if we can get a normal distribution:
lambda <- 0.5
D$pow.obs.norm.trans <- 2*log(D$pow.obs.norm^lambda/(1-D$pow.obs.norm)^(1-lambda))
qqplot(rnorm(length(D$pow.obs.norm.trans), mean = mean(D$pow.obs.norm.trans), sd = sd(D$pow.obs.norm.trans)), D$pow.obs.norm.trans)
#Fitting models to wind power:
dists <- testDistribution(c(NA,NA), NA, giveDistributions = T)
opt.parms <- matrix(NA, nrow = length(dists), ncol = 2)
for (i in 1:length(dists)){
opt.temp <- nlminb(start = c(1,0.5), objective = testDistribution,
x = D$pow.obs.norm,
distribution = dists[i],
lower = c(0,0))
opt.parms[i,] <- opt.temp$par
}
ggplot(D)+
geom_histogram(aes(x = pow.obs.norm)
, bins = 30)+
theme_bw()+
stat_function(fun = dnorm,   n = length(D$pow.obs.norm), args = list(mean = opt.parms[1,1], sd = opt.parms[1,2]))+
stat_function(fun = dgamma,  n = length(D$pow.obs.norm), args = list(shape = opt.parms[2,1], rate = opt.parms[2,2]))+
stat_function(fun = dbeta,   n = length(D$pow.obs.norm), args = list(shape1 = opt.parms[3,1], shape2 = opt.parms[3,2]))+
stat_function(fun = dnbinom, n = length(D$pow.obs.norm), args = list(size = opt.parms[4,1], prob = opt.parms[4,2]))
g.pow.obs
?str_to_lower
install.packages("lubria")
install.packages("lubridate")
install.packages("tidyverse")
install.packages("reshape")
install.packages("stringr")
install.packages("pheatmap")
rm(list = ls())
library(lubridate)
library(tidyverse)
library(reshape)
library(stringr)
library(pheatmap)
#Retrieve data from the descriptive statistics script
##### TILPAS DEN HER TIL DEN COMPUTER DEER BRUGES
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
setwd("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/Statistical Modelling/Project-1/")
} else {
setwd("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1")
}
source("descriptiveStatistics.R")
testDistribution <- function(p, x, distribution = "Normal", giveDistributions = F){
if (giveDistributions == T){
NLL <- c("normal", "gamma", "beta", "negative binomial")
distribution = "none"
}
if (str_to_lower(distribution) == "normal"){
mu <- p[1]
sigma <- p[2]
NLL <- -sum(dnorm(x, mean = mu, sd = sigma, log = T))
}
if (str_to_lower(distribution) == "gamma"){
shape <- p[1]
rate <- p[2]
NLL <- -sum(dgamma(x, shape = shape, rate = rate, log = T))
}
if (str_to_lower(distribution) == "beta"){
#The beta distribution only ranges from [0;1] and thus it is
#exclusively relevant to the normalized wind power statistic
#and not the fitting of the other two parameters.
shape1 <- p[1]
shape2 <- p[2]
NLL <- -sum(dbeta(x, shape = shape1, shape2 = shape2, log = T))
}
if (str_to_lower(distribution) == "negative binomial"){
alpha <- p[1] #target number of succesfull trials
pi <- p[2] #probability of succes in each trial
NLL <- -sum(dnbinom(alpha, size = x, prob = pi, log = T))
}
return(NLL)
}
#### WINDPOWER ####
#Wind power have been normalized to lie between 0-1, so we use the second transformation in the
#assigment to see if we can get a normal distribution:
lambda <- 0.5
D$pow.obs.norm.trans <- 2*log(D$pow.obs.norm^lambda/(1-D$pow.obs.norm)^(1-lambda))
qqplot(rnorm(length(D$pow.obs.norm.trans), mean = mean(D$pow.obs.norm.trans), sd = sd(D$pow.obs.norm.trans)), D$pow.obs.norm.trans)
#Fitting models to wind power:
dists <- testDistribution(c(NA,NA), NA, giveDistributions = T)
opt.parms <- matrix(NA, nrow = length(dists), ncol = 2)
for (i in 1:length(dists)){
opt.temp <- nlminb(start = c(1,0.5), objective = testDistribution,
x = D$pow.obs.norm,
distribution = dists[i],
lower = c(0,0))
opt.parms[i,] <- opt.temp$par
}
ggplot(D)+
geom_histogram(aes(x = pow.obs.norm)
, bins = 30)+
theme_bw()+
stat_function(fun = dnorm,   n = length(D$pow.obs.norm), args = list(mean = opt.parms[1,1], sd = opt.parms[1,2]))+
stat_function(fun = dgamma,  n = length(D$pow.obs.norm), args = list(shape = opt.parms[2,1], rate = opt.parms[2,2]))+
stat_function(fun = dbeta,   n = length(D$pow.obs.norm), args = list(shape1 = opt.parms[3,1], shape2 = opt.parms[3,2]))+
stat_function(fun = dnbinom, n = length(D$pow.obs.norm), args = list(size = opt.parms[4,1], prob = opt.parms[4,2]))
g.pow.obs
?g.pow.obs
g
?g
??g
rm(list = ls())
library(lubridate)
library(tidyverse)
library(reshape)
library(stringr)
library(pheatmap)
#Retrieve data from the descriptive statistics script
##### TILPAS DEN HER TIL DEN COMPUTER DEER BRUGES
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
setwd("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/Statistical Modelling/Project-1/")
} else {
setwd("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1")
}
source("descriptiveStatistics.R")
testDistribution <- function(p, x, distribution = "Normal", giveDistributions = F){
if (giveDistributions == T){
NLL <- c("normal", "gamma", "beta", "negative binomial")
distribution = "none"
}
if (str_to_lower(distribution) == "normal"){
mu <- p[1]
sigma <- p[2]
NLL <- -sum(dnorm(x, mean = mu, sd = sigma, log = T))
}
if (str_to_lower(distribution) == "gamma"){
shape <- p[1]
rate <- p[2]
NLL <- -sum(dgamma(x, shape = shape, rate = rate, log = T))
}
if (str_to_lower(distribution) == "beta"){
#The beta distribution only ranges from [0;1] and thus it is
#exclusively relevant to the normalized wind power statistic
#and not the fitting of the other two parameters.
shape1 <- p[1]
shape2 <- p[2]
NLL <- -sum(dbeta(x, shape = shape1, shape2 = shape2, log = T))
}
if (str_to_lower(distribution) == "negative binomial"){
alpha <- p[1] #target number of succesfull trials
pi <- p[2] #probability of succes in each trial
NLL <- -sum(dnbinom(alpha, size = x, prob = pi, log = T))
}
return(NLL)
}
#### WINDPOWER ####
#Wind power have been normalized to lie between 0-1, so we use the second transformation in the
#assigment to see if we can get a normal distribution:
lambda <- 0.5
D$pow.obs.norm.trans <- 2*log(D$pow.obs.norm^lambda/(1-D$pow.obs.norm)^(1-lambda))
qqplot(rnorm(length(D$pow.obs.norm.trans), mean = mean(D$pow.obs.norm.trans), sd = sd(D$pow.obs.norm.trans)), D$pow.obs.norm.trans)
#Fitting models to wind power:
dists <- testDistribution(c(NA,NA), NA, giveDistributions = T)
opt.parms <- matrix(NA, nrow = length(dists), ncol = 2)
for (i in 1:length(dists)){
opt.temp <- nlminb(start = c(1,0.5), objective = testDistribution,
x = D$pow.obs.norm,
distribution = dists[i],
lower = c(0,0))
opt.parms[i,] <- opt.temp$par
}
ggplot(D)+
geom_histogram(aes(x = pow.obs.norm)
, bins = 30)+
theme_bw()+
stat_function(fun = dnorm,   n = length(D$pow.obs.norm), args = list(mean = opt.parms[1,1], sd = opt.parms[1,2]))+
stat_function(fun = dgamma,  n = length(D$pow.obs.norm), args = list(shape = opt.parms[2,1], rate = opt.parms[2,2]))+
stat_function(fun = dbeta,   n = length(D$pow.obs.norm), args = list(shape1 = opt.parms[3,1], shape2 = opt.parms[3,2]))+
stat_function(fun = dnbinom, n = length(D$pow.obs.norm), args = list(size = opt.parms[4,1], prob = opt.parms[4,2]))
#g.pow.obs
#### WIND SPEED ####
ws30_N <- nlminb(start = c(0,1), objective = testDistribution
, x = D$ws30
, lower = c(0,0))
ws30_G <- nlminb(start = c(1,1), objective = testDistribution
, x = D$ws30
, distribution = "gamma"
, lower = c(0,0))
ggplot(D)+
geom_histogram(aes(x = ws30, y = ..count../sum(..count..))
, colour = "white"
, bins = 30)+
stat_function(fun = dnorm, n = 101, args = list(mean = ws30_N$par[1], sd = ws30_N$par[2]))+
stat_function(fun = dgamma
, n = 101
, args = list(shape = ws30_G$par[1], rate = ws30_G$par[2])
, colour = "blue")
F
T
NA
rm(list = ls())
library(lubridate)
library(tidyverse)
library(reshape)
library(pheatmap)
library(openair)
setwd("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1")
D <- read.table("tuno.txt", header=TRUE, sep=" ",
as.is=TRUE)
## Dimensions of D (number of rows and columns)
dim(D)
##  Column/variable names
names(D)
## The first rows/observations
head(D)
## The last rows/observations
tail(D)
## Selected summary statistics
summary(D)
## Another type of summary of the dataset
str(D)
D$date <- as.Date("2003-01-01")-1+D$r.day
D$pow.obs.norm <- D$pow.obs/5000
meltD <- D %>%
select(-r.day, -month, -day, -pow.obs) %>%
melt(id.vars = "date")
ggplot(meltD)+
geom_histogram(aes(x = value, fill = variable), colour = "white")+
facet_wrap(~ variable, scales = "free")
### Heatmap ###
D %>%
select(pow.obs.norm, wd30, ws30) %>%
cor() %>%
pheatmap()
par(mfrow=c(1,2))
plot(D$date, D$pow.obs, type = 'l', xlab="Date", ylab="Average daily power production [kW]",
main = 'Development in average daily power production over time', cex.main = 0.8, col=1)
hist(D$pow.obs, xlab="Power production [kW]", main='Distribution of average daily power production', cex.main=0.8)
### for outliers ###
outlierFUN <- function(data, quantiles){
v <- quantile(x = data, probs = quantiles)
IQR <- v[2] - v[1]
outliers <- ( ( data < (v[1] - 1.5 * IQR) ) | ( data > (v[2] + 1.5 * IQR) ) ) * data
return (outliers)
}
D$outlierws30 <- outlierFUN(data = D$ws30, quantiles = c(0.25,0.75))
###              ###
par(mfrow=c(1,2))
plot(D$date, D$ws30, type = 'l', xlab="Date", ylab="Wind speeds [m/s]", cex.main = 0.8, col=1,
main='Development in wind speeds over time')
points(x = D$date ,y = D$outlierws30, type = 'p', pch = 19, col = "red", cex = 0.25)
hist(D$ws30, xlab="Wind speeds [m/s]", main='Distribution of wind speeds', cex.main = 0.8)
par(mfrow=c(1,2))
plot(D$date, D$wd30, type = 'l', xlab="Date", ylab=expression(paste("Wind direction. N = 0, E = ", pi/2)), col=1,
main='Development in wind directions over time', cex.main = 0.8)
lines(D$date, replicate(length(D$date), 3*pi/2), type='l', col=2) #W
lines(D$date, replicate(length(D$date), pi), type='l', col=3) #S
lines(D$date, replicate(length(D$date), pi/2), type='l', col=4) #E
lines(D$date, replicate(length(D$date), 0), type='l', col=5) #N
legend('topleft', legend = c('wd30', 'W', 'S', 'E', 'N'), col = 1:5, lty = 1, cex = 0.5)
#
hist(D$wd30, xlab=expression(paste('Wind direction. N = 0, E = ', frac(pi,2))),
main='Distribution of wind directions', cex.main = 0.8, freq = TRUE) #####hist to show that wind rose is fine
abline(v = 3*pi/2, col=2)
abline(v = pi, col=3)
abline(v = pi/2, col=4)
abline(v = 0, col=5)
legend('topleft', legend = c('wd30', 'W', 'S', 'E', 'N'), col = 1:5, lty = 1, cex = 0.5)
D$wd30dg <- D$wd30 * 180/pi
###wind d
intv <- 4
#Dwinter <- D[1:54,] #for testing the season plots above :) D$date[55] = 2003-03-01
#Dsummer <- D[140:230,] #for testing the season plots above :) D$date[140] = 2003-06-01
windRose(D, ws = "ws30", wd = "wd30dg", ws2 = NA, wd2 = NA,
ws.int = intv, angle = 30, type = "default", bias.corr = TRUE, cols
= "heat", grid.line = list(value=4, lty=4, col="lightgrey"), width = 1, seg = NULL, auto.text
= TRUE, breaks = round(max(D$ws30)/intv), offset = 10, normalise = FALSE, max.freq =
NULL, paddle = FALSE, key.header = "Wind speed at 30 m", key.footer = "(m/s)",
key.position = "bottom", key = list(height=2), dig.lab = 3, statistic =
"prop.count", pollutant = NULL, annotate = FALSE, angle.scale =
45, border = "black", main="Wind directions distribution (at 30 m)",
cex.main=0.75) #change TYPE = "season" to "default" for a single plot
#angle = 10 v 45, ws.int = 0.5, 1 v 2, bias.corr = try both, cols = increment, heat, jet, hue, u.d.
summary(D)
?weibull
?dweibull
rm(list = ls())
library(lubridate)
library(tidyverse)
library(reshape)
library(stringr)
library(pheatmap)
#Retrieve data from the descriptive statistics script
##### TILPAS DEN HER TIL DEN COMPUTER DEER BRUGES
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
setwd("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/Statistical Modelling/Project-1/")
} else {
print("Fejl: Viktor, Indsæt lokationen på din egen folder her")
}
source("descriptiveStatistics.R")
testDistribution <- function(p, x, distribution = "Normal", giveDistributions = F){
if (giveDistributions == T){
NLL <- c("normal", "gamma", "beta", "negative binomial")
distribution = "none"
}
if (str_to_lower(distribution) == "normal"){
mu <- p[1]
sigma <- p[2]
NLL <- -sum(dnorm(x, mean = mu, sd = sigma, log = T))
}
if (str_to_lower(distribution) == "gamma"){
shape <- p[1]
rate <- p[2]
NLL <- -sum(dgamma(x, shape = shape, rate = rate, log = T))
}
if (str_to_lower(distribution) == "beta"){
#The beta distribution only ranges from [0;1] and thus it is
#exclusively relevant to the normalized wind power statistic
#and not the fitting of the other two parameters.
shape1 <- p[1]
shape2 <- p[2]
NLL <- -sum(dbeta(x, shape = shape1, shape2 = shape2, log = T))
}
if (str_to_lower(distribution) == "exponential"){
lambda = p
NLL <- -sum(dexp(x, rate = lambda, log = T))
}
if (str_to_lower(distribution) == "weibull"){
shape = p[1]
scale = p[2]
NLL <- -sum(dweibull(x, shape = shape, scale = scale, log = T))
}
if (str_to_lower(distribution) == "negative binomial"){
alpha <- p[1] #target number of succesfull trials
probs <- p[2] #probability of succes in each trial
NLL <- -sum(dnbinom(x = alpha, size = x, prob = probs, log = T))
}
return(NLL)
}
#### WINDPOWER ####
#Fitting models to wind power:
par <- nlminb(start = 0.2, objective = testDistribution,
distribution = "exponential",
x = D$pow.obs.norm)
ggplot(D)+
geom_histogram(aes(x = pow.obs.norm, y = ..density..), bins = 20)+
theme_bw()+
stat_function(fun = dexp, n = length(D$pow.obs.norm), args = list(rate = par$par))
g.pow.obs
### WIND SPEED ####
par.ws30 <- nlminb(start = c(1,1), objective = testDistribution
, x = D$ws30
, distribution = "weibull"
, lower = c(0,0))
ggplot(D)+
geom_histogram(aes(x = ws30, y = ..count../sum(..count..))
, colour = "white"
, bins = 30)+
theme_bw()+
stat_function(fun = dweibull, n = dim(D)[1], args = list(shape = par.ws30$par[1], scale = par.ws30$par[2]))
#### WIND DIRECTION ####
#centrerer fordelingen omkring 3/2pi
D$wd30.centered <- D$wd30 - pi/2; D$wd30.centered[D$wd30.centered < 0] = D$wd30.centered[D$wd30.centered < 0] + 2*pi
par.wd30 <- nlminb(start = c(4,4),
objective = testDistribution,
x = D$wd30.centered,
distribution = "normal")
ggplot(D)+
theme_bw()+
geom_density(aes(x = wd30.centered, y = ..density..), alpha = .8, colour = "white", fill = "red", colour = "white")+
geom_density(aes(x = wd30, y = ..density..), colour = "white", alpha = .2, fill = "blue")+
scale_x_continuous(breaks = c(0,pi/2,pi,3/2*pi,2*pi)
, labels =c("0", "pi/2", "pi", "3/2pi", "2pi"))+
stat_function(fun = dnorm, n = dim(D)[1], args = list(mean = par.wd30$par[1], sd = par.wd30$par[2]))
par$par
par$objective
par.ws30$par
par.wd30$par
