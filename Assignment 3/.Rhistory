sigma.wald.CI <- exp(c(weibull.wald.lower[1], weibull.wald.upper[1]))
beta0.test.range <- seq(beta0.wald.CI[1], beta0.wald.CI[2], abs(0.001*beta0))
beta1.test.range <- seq(beta1.wald.CI[1], beta1.wald.CI[2], abs(0.001*beta1))
beta2.test.range <- seq(beta2.wald.CI[1], beta2.wald.CI[2], abs(0.001*beta2))
res0 <- apply(cbind(sigma, beta0.test.range, beta1, beta2), MARGIN = 1, FUN = score.nll.wei)
res1 <- apply(cbind(sigma, beta0, beta1.test.range, beta2), MARGIN = 1, FUN = score.nll.wei)
res2 <- apply(cbind(sigma, beta0, beta1, beta2.test.range), MARGIN = 1, FUN = score.nll.wei)
par(mfrow = c(1,3))
plot(beta0.test.range, res0, main = TeX("Score linearity for $\\beta_0$")
,xlab = TeX("$\\beta_0$"), ylab = "Score", pch = 16)
abline(lm(res0 ~ beta0.test.range), col = 2, lwd = 2)
grid()
plot(beta1.test.range, res1, main = TeX("Score linearity for $\\beta_1$")
,xlab = TeX("$\\beta_1$"), ylab = "Score", pch = 16)
abline(lm(res1 ~ beta1.test.range), col = 2, lwd = 2)
grid()
plot(beta1.test.range, res1, main = TeX("Score linearity for $\\beta_2$")
,xlab = TeX("$\\beta_2$"), ylab = "Score", pch = 16)
abline(lm(res1 ~ beta1.test.range), col = 2, lwd = 2)
grid()
ll.wei <- function(theta
, time = actg$time
, event = actg$event
, treatment = actg$tx
, cd4 = actg$cd4){
sigma <- exp(theta[1])  #estimate scale parameter on log-scale
beta0 <- theta[2]
beta1 <- theta[3]
beta2 <- theta[4]
h <-1/sigma * time^(1/sigma - 1) * exp(-1/sigma * (beta0 + beta1 * treatment + beta2 * cd4))
H <- time^(1/sigma) * exp(-1/sigma * (beta0 + beta1 * treatment + beta2 * cd4))
nll <- sum(event*log(h) - H)
return(nll)
}
pf0 <- apply(cbind(sigma, beta0.test.range, beta1, beta2), MARGIN = 1, FUN = ll.wei)
pf1 <- apply(cbind(sigma, beta0, beta1.test.range, beta2), MARGIN = 1, FUN = ll.wei)
pf2 <- apply(cbind(sigma, beta0, beta1, beta2.test.range), MARGIN = 1, FUN = ll.wei)
find_Profile_likelihood_CI <- function(pf, test.range, parameterName = NULL){
CI_temp <- exp(pf-max(pf))-exp(-qchisq(0.95, df = 1)/2)
lower <- min(test.range[CI_temp > 0])
upper <- max(test.range[CI_temp > 0])
if (!is.null(parameterName)){
cat("\n\n",parameterName,":" ,"\n95% Profile Likelihood CI: [", lower, ",", upper, "]")
} else {
cat("95% Profile Likelihood CI: [", lower, ",", upper, "]")
}
return(c(lower,upper))
}
pfCI_beta0 <- find_Profile_likelihood_CI(pf0, beta0.test.range, parameterName = "beta0")
pfCI_beta1 <- find_Profile_likelihood_CI(pf1, beta1.test.range, parameterName = "beta1")
pfCI_beta2 <- find_Profile_likelihood_CI(pf2, beta2.test.range, parameterName = "beta2")
par(mfrow = c(1,3))
plot(beta0.test.range, exp(pf0-max(pf0)), "l"
, xlab = TeX("$\\beta_0$")
, ylab = "Standardised profile likelihood")
grid()
abline(h = exp(-qchisq(0.95, df = 1)/2), col = 2, lty = 2)
text("Wald CI", col = 4, x = beta0, y = exp(-qchisq(0.95, df = 1)/2)+.05, adj = .5)
abline(v = beta0.wald.CI, col = 4)
text("pf CI", col = 2, x = beta0, y = exp(-qchisq(0.95, df = 1)/2)-.05, adj = .5)
abline(v = pfCI_beta0, col = 2)
plot(beta1.test.range, exp(pf1-max(pf1)), "l"
, xlab = TeX("$\\beta_1$")
, ylab = "Standardised profile likelihood")
grid()
abline(h = exp(-qchisq(0.95, df = 1)/2), col = 2, lty = 2)
text("Wald CI", col = 4, x = beta1, y = exp(-qchisq(0.95, df = 1)/2)+.05, adj = .5)
abline(v = beta1.wald.CI, col = 4)
text("pf CI", col = 2, x = beta1, y = exp(-qchisq(0.95, df = 1)/2)-.05, adj = .5)
abline(v = pfCI_beta1, col = 2)
plot(beta2.test.range, exp(pf2-max(pf2)), "l"
, xlab = TeX("$\\beta_2$")
, ylab = "Standardised profile likelihood")
grid()
abline(h = exp(-qchisq(0.95, df = 1)/2), col = 2, lty = 2)
text("Wald CI", col = 4, x = beta2, y = exp(-qchisq(0.95, df = 1)/2)+0.05, adj = .5)
abline(v = beta2.wald.CI, col = 4)
text("pf CI", col = 2, x = beta2, y = exp(-qchisq(0.95, df = 1)/2)-0.05, adj = .5)
abline(v = pfCI_beta2, col = 2)
data.frame("beta0" = c(beta0, pfCI_beta0)
,"beta1" = c(beta1, pfCI_beta1)
,"beta2" = c(beta2, pfCI_beta2)
, row.names = c("MLE","95% LOWER","95% UPPER"))
beta0.lower <- pfCI_beta0[1]
beta0.upper <- pfCI_beta0[2]
beta1.lower <- pfCI_beta1[1]
beta1.upper <- pfCI_beta1[2]
beta2.lower <- pfCI_beta2[1]
beta2.upper <- pfCI_beta2[2]
#Går tilbage til Wald
cat("beta_0 = ", weibull.model.manual$par[2], "95% CI [",weibull.wald.lower[2],", ",weibull.wald.upper[2],"]"
,"\nbeta_1 = ", weibull.model.manual$par[3], "95% CI [",weibull.wald.lower[3],", ",weibull.wald.upper[3],"]"
,"\nbeta_2 = ", weibull.model.manual$par[4], "95% CI [",weibull.wald.lower[4],", ",weibull.wald.upper[4],"]"
,"\nscale = ", exp(weibull.model.manual$par[1]), "95% CI [",exp(weibull.wald.lower[1]),", ",exp(weibull.wald.upper[1]),"]\n")
beta0.lower <- weibull.wald.lower[2]
beta0.upper <- weibull.wald.upper[2]
beta1.lower <- weibull.wald.lower[3]
beta1.upper <- weibull.wald.upper[3]
beta2.lower <- weibull.wald.lower[4]
beta2.upper <- weibull.wald.upper[4]
beta1 <- weibull.model.manual$par[3]
cat("Time Ratio for the treatment effect: TR(tx = 1, tx = 0) = ", exp(beta1), " 95% CI [",exp(c(beta1.lower)),",", exp(c(beta1.upper)),"]")
beta2 <- weibull.model.manual$par[4]
cat("Time Ratio for the cd4 * 50 effect: TR(tx = 1, tx = 0) = ", exp(beta2*50), " 95% CI [",exp(c(50*beta2.lower)),",", exp(c(50*beta2.upper)),"]")
par(mfrow = c(1,1))
plot(fit.wei$time, -log(fit.wei$surv), main = "Weibull Cox-Snell Check"
,xlab = TeX("$r_i$")
,ylab = TeX("-log($S_{KM}(r_i)$)"))
grid()
abline(a=0, b=1, col = 2, lwd = 2)
actg$cd4.cats <- cut(actg$cd4, breaks = c(0,100,max(actg$cd4)))
survival.functions <- survfit(Surv(time, event) ~ tx + cd4.cats, data = actg)
actg$cd4.category.num <- 0
actg$cd4.category.num[actg$cd4 < 100] <- 1
actg$cd4.category.num[actg$cd4 >= 100] <- 2
wei.survival <- function(theta, time, tx, cd4){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
scale <- theta[4]
out <- exp(-(time/exp(beta0 + beta1*tx + beta2*cd4))^(1/scale))
return(out)
}
#for fixed values
step.size <- 0.5
theta <- c(weibull.model$coefficients,weibull.model$scale)
time.steps <- seq(0.5,max(actg$time), step.size) #lader den lige starte i 0.5 for at undgå bøvl med h.cum
first.sim <- wei.survival(theta, time.steps, 0, median(actg$cd4[actg$cd4 < 100 & actg$tx == 0]))
second.sim <- wei.survival(theta, time.steps, 0, median(actg$cd4[actg$cd4 > 100 & actg$tx == 0]))
third.sim <- wei.survival(theta, time.steps, 1, median(actg$cd4[actg$cd4 < 100 & actg$tx == 1]))
fourth.sim <- wei.survival(theta, time.steps, 1, median(actg$cd4[actg$cd4 > 100 & actg$tx == 1]))
#wei.survival(c(weibull.model$coefficients,weibull.model$scale), actg$time, actg$tx, actg$cd4)
par(mfrow = c(1,2))
plot(survival.functions, cumhaz = T, conf.int = T, col = 2:5, ylim = c(0,0.3), lwd = 1, main = "Weibull Regression Models and Kaplan Meier Cumulative Hazard")
grid()
f.weibull.t <- function(t, theta, x, scale){
shape <- as.vector(theta %*% x)
out <- shape/scale * (t/scale)^(shape-1) * exp(-(t/scale)^shape)
return(out)
}
h.weibull.t <- function(t, theta, treatment, cd4, step.size){
sigma <- exp(theta[1])
beta0 <- theta[2]
beta1 <- theta[3]
beta2 <- theta[4]
out <- cumsum(1/sigma * t^(1/sigma - 1) * exp(-1/sigma * (beta0 + beta1 * treatment + beta2 * cd4))*step.size)
return(out)
}
lines(time.steps, h.weibull.t(time.steps, weibull.model.manual$par, 0, median(actg$cd4[actg$cd4 < 100 & actg$tx == 0]), step.size), col = 2 , lwd = 3)
lines(time.steps, h.weibull.t(time.steps, weibull.model.manual$par, 0, median(actg$cd4[actg$cd4 > 100 & actg$tx == 0]), step.size), col = 3, lwd = 3)
lines(time.steps, h.weibull.t(time.steps, weibull.model.manual$par, 1, median(actg$cd4[actg$cd4 < 100 & actg$tx == 1]), step.size), col = 4 , lwd = 3)
lines(time.steps, h.weibull.t(time.steps, weibull.model.manual$par, 1, median(actg$cd4[actg$cd4 > 100 & actg$tx == 1]), step.size), col = 5, lwd = 3)
legend(legend = c("cd4: 0-100, tx: 0", "cd4: 100+, tx: 0", "cd4: 0-100, tx: 1", "cd4: 100+, tx: 1"), lty = 1, "topleft", col = 2:5, lwd = 4)
plot(survival.functions, conf.int = T, col = 2:5, ylim = c(1,0.7), lwd = 1, main = "Weibull Regression Models and Kaplan Meier Survival Curves")
grid()
lines(time.steps, first.sim, col = 2 , lwd = 3)
lines(time.steps, second.sim, col = 3, lwd = 3)
lines(time.steps, third.sim, col = 4 , lwd = 3)
lines(time.steps, fourth.sim, col = 5, lwd = 3)
legend(legend = c("cd4: 0-100, tx: 0", "cd4: 100+, tx: 0", "cd4: 0-100, tx: 1", "cd4: 100+, tx: 1"), lty = 1, "bottomleft", col = 2:5, lwd = 4)
#kaplan.meier survival curves function
library(tidyverse)
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
actg320 <- read.table("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/02418 - Statistical Modelling/Project-1/actg320.txt", header=TRUE, sep="",
as.is=TRUE)
} else {
actg320 <- read.table("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1/actg320.txt", header=TRUE, sep="",
as.is=TRUE)
}
#select time, event and tx as they are the only relevant variables in this project
actg <- actg320 %>%
dplyr::select(time, event, tx, cd4)
data = actg
event = "event"
time = 'time'
data %>%
select(time, event) -> data_selected
#kaplan.meier survival curves function
library(tidyverse)
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
actg320 <- read.table("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/02418 - Statistical Modelling/Project-1/actg320.txt", header=TRUE, sep="",
as.is=TRUE)
} else {
actg320 <- read.table("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1/actg320.txt", header=TRUE, sep="",
as.is=TRUE)
}
#select time, event and tx as they are the only relevant variables in this project
actg <- actg320 %>%
dplyr::select(time, event, tx, cd4)
data = actg
event = "event"
time = 'time'
data
data %>%
select(time, event) -> data_selected
data
data_selected
head(data);head(data_selected)
data_selected %>%
dplyr::rename( t = time
,d = event) %>%
arrange(t) %>%
mutate(R = n():1
,censored = 1-d) %>%
group_by(t) %>%
summarise(d = sum(d), R = max(R), censored = sum(censored)) %>%
mutate(EventsPerAvailable = 1 - d/R
,S = cumprod(EventsPerAvailable)
,logS = log(S)
,Varloglog = 1/logS^2 * cumsum(d/(R*(R-d)))
,loglog_minus = log(-logS) - qnorm(0.975) * sqrt(Varloglog)
,loglog_plus = log(-logS) + qnorm(0.975) * sqrt(Varloglog)
,lower = exp(-exp(loglog_plus))
,upper = exp(-exp(loglog_minus))) %>%
select(-loglog_minus, -loglog_plus, -logS, -Varloglog, -EventsPerAvailable)-> init.table
#Comparing Survival Functions
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
source("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/02418 - Statistical Modelling/Project-1/kaplan-meier-manual.R")
} else {
source("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1/kaplan-meier-manual.R")
}
logRank <- function(data = actg, group = "tx", event = "event", time = "time"){
groups <- unique(data[[group]])
outs <- list()
e <- list()
outs[["none"]] <- kaplan.meier(data = data, event = event, time = time)
#Iterate over groups and merge on timestep
for (i in groups){
outs[[paste(i)]] <- kaplan.meier(data = filter(data, !!sym(group) == i), event = event, time = time)
tmp <- outs$none %>%
left_join(outs[[paste(i)]], by = 't')
#Udfylder alle NA værdier i grupperne (0 eller 1) med værdien fra det forudgående tidsskridt, da der i tidsskridtene med
#NA værdier ikke sker nogen ændring.
for (j in dim(tmp)[1]:1){
if(is.na(tmp[j,8])){
tmp[j,-(1:7)] <- tmp[j+1,-(1:7)]
tmp$d.y[j] <- 0
tmp$censored.y[j] <- 0
}
}
tmp %>%
mutate(e = R.y * d.x/R.x) -> e[[paste(i)]] #slide 32 uge 36
#mutate(e = R.y * d.x / R.x)-> e[[paste(i)]]
}
w <- 1
#}
e$`0` %>%
mutate(v = e*((R.x - d.x)/R.x)*((R.x-R.y)/(R.x - 1))) -> e$`0`
Q0 <- sum(w*(e$`0`$d.y - e$`0`$e), na.rm = T)^2 / sum(w^2 * e$`0`$v, na.rm = T)
e$`1` %>%
mutate(v = e*((R.x - d.x)/R.x)*((R.x-R.y)/(R.x - 1))) -> e$`1`
Q1 <- sum(w*(e$`1`$d.y - e$`1`$e))^2 / sum(w^2 * e$`1`$v, na.rm = T)
cat("",group,": ",0, " | "
,"n = ", max(e$`0`$R.y)
, "Observed: ", sum(e$`0`$d.y, na.rm = T)
, ", Expected: ", sum(e$`0`$e, na.rm = T)
, ", (O-E)^2/V =", (sum(e$`0`$d.y) - sum(e$`0`$e))^2/sum(e$`0`$v)
, ", Q = ", Q0
,"\n",group,": ",1, " | "
,"n = ", max(e$`1`$R.y)
, "Observed: ", sum(e$`1`$d.y)
, ", Expected: ", sum(e$`1`$e)
, ", (O-E)^2/V =", (sum(e$`1`$d.y) - sum(e$`1`$e))^2/sum(e$`1`$v)
, ", Q = ", Q1
, "\n\n\np-value for chi-squared test for q = ",Q0," ", "with df = ", 1," : ", 1-pchisq(q = Q0, df = 1))
}
#
# library(survival)
# fit <- survfit(Surv(time, event) ~ tx, data = actg)
# fit$surv
# fit$time
#
# plot(fit$time[1:228], fit$surv[1:228], "l", lwd = 5)
# grid()
# lines(fit$time[229:(228+205)], fit$surv[229:(228+205)], "l", lwd = 5)
# lines(fit$time[229:(228+205)], fit$lower[229:(228+205)], "l", lwd = 5)
# lines(fit$time[229:(228+205)], fit$upper[229:(228+205)], "l", lwd = 5)
# lines(fit$time[1:(228)], fit$lower[1:(228)], "l", lwd = 5)
# lines(fit$time[1:(228)], fit$upper[1:(228)], "l", lwd = 5)
# lines(outs$`0`$t, outs$`0`$S, col = "yellow")
# lines(outs$`1`$t, outs$`1`$S, col = "yellow")
# lines(outs$`1`$t, outs$`1`$lower, lty = "dashed")
# lines(outs$`1`$t, outs$`1`$upper, lty = "dashed")
# lines(outs$`0`$t, outs$`0`$lower, lty = "dashed")
# lines(outs$`0`$t, outs$`0`$upper, lty = "dashed")
knitr::opts_chunk$set(warning = F, fig.height = 4, message = F, dpi = 500)
rm(list = ls())
library(lubridate)
library(latex2exp)
library(circular)
library(tidyverse)
library(reshape)
library(pheatmap)
library(openair)
library(stringr)
library(numDeriv)
library(gridExtra)
library(openair)
library(PowerNormal)
library(sn)
library(gnorm)
library(emg)
library(survival)
library(survminer)
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
setwd("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/02418 - Statistical Modelling/Project-1/Project 2/")
} else {
setwd("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1")
}
log.data <- read.table("Logistic.txt", header=TRUE, sep="",
as.is=TRUE)
source("testDistribution.R")
nll.bin <- function(theta, event = log.data$AIDS_yes
, n = log.data$n
, treatment = c(1,0)){
beta_0 <- theta[1]
beta_1 <- theta[2]
theta <- exp(beta_0+beta_1*treatment)/(1+exp(beta_0+beta_1*treatment))
nll <- -sum(log(theta)*event + (n-event)*log((1 - theta)))
return(nll)
}
log.reg <- nlminb(start = c(0,0), objective = nll.bin)
(beta <- log.reg$par)
beta0 <- beta[1]
beta1 <- beta[2]
sd_beta <- sqrt(diag(solve(hessian(x = beta, func = nll.bin))))
sd.beta0 <- sd_beta[1]
sd.beta1 <- sd_beta[2]
W.CI.0 <- round(beta0 + c(-1,1)*qnorm(0.975)*sd.beta0,4)
W.CI.1 <- round(beta1 + c(-1,1)*qnorm(0.975)*sd.beta1,4)
logistic <- data.frame("AZT" = c(rep(1,170), rep(0,168))
,"AIDS_yes" = c(rep(c(1,0),c(25,170-25)), rep(c(1,0), c(44, 168-44))))
fit.glm <- glm(AIDS_yes ~ AZT, data = logistic, family = binomial)
cat(paste0("with glm model: ", coef(fit.glm)
,"\nBy hand (according to slide 19 lect 4): "
,"\nbeta_0 = ", beta0, ", beta_1 = ", beta1))
# #Test regularity #aldready tested in A1P1
# score.nll.log <- function(theta){
#
#   event <- log.data$AIDS_yes
#   n <- log.data$n
#   treatment <- c(1,0)
#
#   beta0 <- theta[1]
#   beta1 <- theta[2]
#
#   theta <- exp(beta0 + beta1 * treatment)/(1 + exp(beta0 + beta1 * treatment))
#
#   score <- -sum(event/theta - (1 - event)/(1 - theta))
#   return(score)
# }
#beta0.test.range <- seq(beta0.wald.CI[1], beta0.wald.CI[2], abs(0.01*beta0))
#beta1.test.range <- seq(beta1.wald.CI[1], beta1.wald.CI[2], abs(0.01*beta1))
#res0 <- apply(cbind(beta0.test.range, beta1), MARGIN = 1, FUN = score.nll.log)
#res1 <- apply(cbind(beta0, beta1.test.range), MARGIN = 1, FUN = score.nll.log)
# par(mfrow = c(1,2))
# plot(beta0.test.range, res0, main = TeX("Score linearity for $\\beta_0$")
#      ,xlab = TeX("$\\beta_0$"), ylab = "Score", pch = 16)
# abline(lm(res0 ~ beta0.test.range), col = 2, lwd = 2)
# grid()
#
# plot(beta1.test.range, res1, main = TeX("Score linearity for $\\beta_1$")
#      ,xlab = TeX("$\\beta_1$"), ylab = "Score", pch = 16)
# abline(lm(res1 ~ beta1.test.range), col = 2, lwd = 2)
# grid()
exp(beta1)
exp(c(W.CI.1[1], W.CI.1[2]))
nll.log.no.effect <- function(theta, event, n, treatment){
beta0 <- theta[1]
theta <- exp(beta0)/(1 + exp(beta0))
nll <- -sum(log(theta)*event  + log(1-theta)*(n - event))
return(nll)
}
log.reg.no.effect <- nlminb(start = 1, objective = nll.log.no.effect
, event = sum(log.data$AIDS_yes)
, n = sum(log.data$n), treatment = 0)
log.reg.no.effect$par
chi.squared <- - 2 * (log.reg$objective - log.reg.no.effect$objective)
p.value.LRT <- 1 - pchisq(chi.squared, df = 1)
cat("The log ratio chi-square test statistic = ",chi.squared,
"\np-value = ", p.value.LRT,
"\n\nThe log-ratio test show that the effect of the treatment is significant on a significance level of alpha = 0.05.")
waldTestStatistic <- beta1/sd.beta1
wald.p.value <- 2*pnorm(waldTestStatistic)
cat("The wald test statistic = ",waldTestStatistic,
"\np-value = ", wald.p.value,
"\n\nThe wald test show that the effect of the treatment is significant on a significance level of alpha = 0.05.")
Y_1 <- as.numeric(log.data$AIDS_yes[log.data$AZT=='Yes'])
Y_2 <- as.numeric(log.data$AIDS_yes[log.data$AZT=='No'])
m_1 <- as.numeric(log.data$n[log.data$AZT=='Yes'])
m_2 <- as.numeric(log.data$n[log.data$AZT=='No'])
beta0_score <- log.reg.no.effect$par #estimated is beta0, log.reg$par[1] for the model with treatment parameter included
beta1_score = 0 #estimated is beta1, log.reg$par[2]
P_1 <- exp(beta0_score+beta1_score) / (1+exp(beta0_score+beta1_score))
P_2 <- exp(beta0_score) / (1+exp(beta0_score))
S_1 <- Y_1 - m_1*P_1 + Y_2 - m_2*P_2
S_2 <- Y_1 - m_1*P_1
S <- c(S_1, S_2)
V_S_vect <- c(m_1*P_1*(1-P_1)+m_2*P_2*(1-P_2), m_1*P_1*(1-P_1)+0, m_1*P_1*(1-P_1)+0, m_1*P_1*(1-P_1))
V_S <- matrix(c(V_S_vect), nrow = 2, ncol = 2)
chi.squared.Score <- t(S)%*%solve(V_S)%*%S
(1 - pchisq(chi.squared.Score, df = 1))
p.value.Score <- as.numeric(1 - pchisq(chi.squared.Score, df = 1))
comp.table <- rbind("Log ratio test" = c(p.value.LRT, "Show that the addition of the treatment effect (beta1) is significant.")
, "Wald test" = c(wald.p.value,"Show that the addition of the treatment effect (beta1) is significant.")
, "Score test" = c(p.value.Score, "Show that the two treatment groups cannot be treated as being just one group")); colnames(comp.table) <- c("p-value", "interpretation")
comp.table
#tx: Treatment indicator. 1 = New treatment, 0 = Control treatment
#event: Indicator for AIDS or death. 1 = AIDS diagnosis or death, 0 = Otherwise
#time: Time to AIDS diagnosis or death. Days
#så tiden for event = 0 må angive at personen har været med i studiet time[X] dage uden at være enten død eller fået AIDS.
actg320 <- read.table("actg320.txt", header=TRUE, sep="",
as.is=TRUE)
#select time, event and tx as they are the only relevant variables in this project
actg <- actg320 %>%
dplyr::select(time, event, tx, cd4)
actg %>%
group_by(tx) %>%
summarise("Got AIDS or DIED" = sum(event),
"Proportion" = sum(event)/n(),
"Participants Given the Treatment" = n(),
"Total follow up time" = sum(time))
kaplan.meier <- survfit(Surv(time, event) ~ tx, data = actg)
ggsurvplot(kaplan.meier
, data = actg
, conf.int = T
, risk.table = "abs_pct"
, ylim = c(0.8,1)
,ggtheme = theme_bw()
,legend.labs = c("No Treatment", "Treatment"))
ggsurvplot(kaplan.meier
, data = actg
, conf.int = T
, risk.table = "abs_pct"
,ggtheme = theme_bw()
,fun = "cumhaz"
,legend.labs = c("No Treatment", "Treatment"))
survdiff(formula=Surv(time, event)~tx, data=actg)
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
setwd("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/02418 - Statistical Modelling/Project-1/Project 2/")
source("../kaplan-meier-manual.R")
source("../Manuel Log-rant (TEST).R")
} else {
setwd("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1")
source("kaplan-meier-manual.R")
source("Manuel Log-rant (TEST).R")
}
logRank(data = actg, group = "tx", event = "event", time = "time")
exp.model <- survreg(Surv(time, event) ~ tx + cd4, data = actg, dist = "exponential")
weibull.model <- survreg(Surv(time, event) ~ tx + cd4, data = actg, dist = "weibull")
loglogistic.model <- survreg(Surv(time, event) ~ tx + cd4, data = actg, dist = "loglogistic")
#summary(exp.model)
nll.exp <- function(theta
, time = actg$time
, event = actg$event
, treatment = actg$tx
, cd4 = actg$cd4){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
h <- exp(- beta0 - beta1 * treatment - beta2 * cd4)
H <- time/exp(beta0 + beta1 * treatment + beta2 * cd4)# time * h
nll <- -sum(event*log(h) - H)
return(nll)
}
exp.model.manual <- nlminb(start = c(1,1,1), objective = nll.exp)
sd.exp.manual <- sqrt(diag(solve(hessian(func = nll.exp, x = exp.model.manual$par))))
exp.model.manual.AIC <-  2 * exp.model.manual$objective + 2 * 3
#summary(weibull.model)
nll.wei <- function(theta
, time = actg$time
, event = actg$event
, treatment = actg$tx
, cd4 = actg$cd4){
sigma <- exp(theta[1])  #estimate scale parameter on log-scale
beta0 <- theta[2]
beta1 <- theta[3]
beta2 <- theta[4]
h <-1/sigma * time^(1/sigma - 1) * exp(-1/sigma * (beta0 + beta1 * treatment + beta2 * cd4))
H <- time^(1/sigma) * exp(-1/sigma * (beta0 + beta1 * treatment + beta2 * cd4))
nll <- -sum(event*log(h) - H)
return(nll)
}
weibull.model.manual <- nlminb(start = c(1,1,1,1), objective = nll.wei)
sd.weibull.manual <- sqrt(diag(solve(hessian(func = nll.wei, x = weibull.model.manual$par))))
weibull.model.manual.AIC <- 2 * weibull.model.manual$objective + 2 * length(weibull.model.manual$par) #3 parms + scale
#summary(loglogistic.model)
#loglog
nll.loglog <- function(theta
, time = actg$time
, event = actg$event
, treatment = actg$tx
, cd4 = actg$cd4){
sigma <- theta[1]
beta0 <- theta[2]
beta1 <- theta[3]
beta2 <- theta[4]
z <- (log(time) - (beta0 + beta1 * treatment + beta2 * cd4))/sigma
h <- exp(z)/(1 + exp(z)) * 1/sigma * 1/time
S <- 1 / (1 + exp(z))
H <- -log(S)
#H <- time^(1/sigma) * exp(-1/sigma * (beta0 + beta1 * treatment + beta2 * cd4))
nll <- -sum(event*log(h) - H)
return(nll)
}
loglogistic.model.manual <- nlminb(start = c(1,1,1,1), objective = nll.loglog)
sd.loglogistic.manual <- sqrt(diag(solve(hessian(func = nll.loglog, x = loglogistic.model.manual$par))))
loglogistic.model.manual.AIC <- 2 * loglogistic.model.manual$objective + 2 * length(loglogistic.model.manual$par) #3 parms + scale
par(mfrow = c(1,3))
actg$cox.snell.exp <- actg$time * exp(- exp.model$linear.predictors)
fit.exp <- survfit(Surv(cox.snell.exp, event == 1) ~ 1, data = actg)
head(actg$cox.snell.exp);head(-log(fit.exp$surv))
