third.sim <- wei.survival(theta, time.steps, 1, median(actg$cd4[actg$cd4 < 100 & actg$tx == 1]))
fourth.sim <- wei.survival(theta, time.steps, 1, median(actg$cd4[actg$cd4 > 100 & actg$tx == 1]))
#wei.survival(c(weibull.model$coefficients,weibull.model$scale), actg$time, actg$tx, actg$cd4)
par(mfrow = c(1,2))
plot(survival.functions, cumhaz = T, conf.int = T, col = 2:5, ylim = c(0,0.3), lwd = 1, main = "Weibull Regression Models and Kaplan Meier Cumulative Hazard")
grid()
f.weibull.t <- function(t, theta, x, scale){
shape <- as.vector(theta %*% x)
out <- shape/scale * (t/scale)^(shape-1) * exp(-(t/scale)^shape)
return(out)
}
h.weibull.t <- function(t, theta, treatment, cd4, step.size){
sigma <- exp(theta[1])
beta0 <- theta[2]
beta1 <- theta[3]
beta2 <- theta[4]
out <- cumsum(1/sigma * t^(1/sigma - 1) * exp(-1/sigma * (beta0 + beta1 * treatment + beta2 * cd4))*step.size)
return(out)
}
lines(time.steps, h.weibull.t(time.steps, weibull.model.manual$par, 0, median(actg$cd4[actg$cd4 < 100 & actg$tx == 0]), step.size), col = 2 , lwd = 3)
lines(time.steps, h.weibull.t(time.steps, weibull.model.manual$par, 0, median(actg$cd4[actg$cd4 > 100 & actg$tx == 0]), step.size), col = 3, lwd = 3)
lines(time.steps, h.weibull.t(time.steps, weibull.model.manual$par, 1, median(actg$cd4[actg$cd4 < 100 & actg$tx == 1]), step.size), col = 4 , lwd = 3)
lines(time.steps, h.weibull.t(time.steps, weibull.model.manual$par, 1, median(actg$cd4[actg$cd4 > 100 & actg$tx == 1]), step.size), col = 5, lwd = 3)
legend(legend = c("cd4: 0-100, tx: 0", "cd4: 100+, tx: 0", "cd4: 0-100, tx: 1", "cd4: 100+, tx: 1"), lty = 1, "topleft", col = 2:5, lwd = 4)
plot(survival.functions, conf.int = T, col = 2:5, ylim = c(1,0.7), lwd = 1, main = "Weibull Regression Models and Kaplan Meier Survival Curves")
grid()
lines(time.steps, first.sim, col = 2 , lwd = 3)
lines(time.steps, second.sim, col = 3, lwd = 3)
lines(time.steps, third.sim, col = 4 , lwd = 3)
lines(time.steps, fourth.sim, col = 5, lwd = 3)
legend(legend = c("cd4: 0-100, tx: 0", "cd4: 100+, tx: 0", "cd4: 0-100, tx: 1", "cd4: 100+, tx: 1"), lty = 1, "bottomleft", col = 2:5, lwd = 4)
library(ggplot2)
library(numDeriv)
if (Sys.getenv("LOGNAME") == "mortenjohnsen"){
setwd("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/9. Semester/02418 - Statistical Modelling/Project-1/")
} else {
setwd("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1")
#setwd("~/Documents/02418 Statistical Modelling/Assignments/Assignment 1/Project-1/Project 2")
#source("testDistribution.R")
}
D <- read.table("tuno.txt", header=TRUE, sep=" ",
as.is=TRUE)
D$date <- as.Date("2003-01-01")-1+D$r.day
D$pow.obs.norm <- D$pow.obs/5000
#lambdas <- seq(-0.5,0.5,by=0.01)
#library(MASS)
#boxcox(lm(D$pow.obs.norm~1), lambda=lambdas)
#Define transformation function
Trans.eq1 <- function(lambda, y){
y_lambda <- 1/lambda * log(y^lambda/(1-y^lambda))#, lambda > 0
return(y_lambda)
}
#Optimization function
#Måske er det bedre at lave nogle undersøgelser selv frem for bare at optimere lambda (Overvej til senere).
#se kode fra lecture 4 linje 5-73
lambda_NLL <- function(lambda, x = D$pow.obs.norm){
y <- Trans.eq1(lambda, x)
NLL <- -as.numeric(shapiro.test(y)$statistic)
return(NLL)
}
lambda.hat <- nlminb(start = 0.2, objective = lambda_NLL)
#round to two decimal points.
lambda <- round(lambda.hat$par, 2)
D$transformed.pow.obs.norm <- Trans.eq1(lambda, D$pow.obs.norm)
#Check qqplot:
par(mfrow = c(2,2))
qqnorm(D$pow.obs.norm)
qqline(D$pow.obs.norm)
hist(D$pow.obs.norm)
qqnorm(D$transformed.pow.obs.norm)
qqline(D$transformed.pow.obs.norm)
hist(D$transformed.pow.obs.norm)
#gamma's pretty bad. Maybe beta would be better?
glmfit2 <- glm( (pow.obs.norm ~ I(ws30^2)), data = D, family = Gamma)
summary(glmfit2)
D$glmpred2 <- ( glmfit2$coefficients[1] + glmfit2$coefficients[2] * D$ws30^2)^(-1)
ggplot(data = D)+
geom_point(aes(x=ws30, y=pow.obs.norm, colour="Data"))+
geom_line(aes(x=ws30, y=glmpred2, colour="Model2"))+
labs(x = "Wind speeds", y="Norm power obs", colour = "")
transfit1 <- lm( (D$transformed.pow.obs.norm ~ ws30), data = D ) #good for comparison
transfit12 <- lm( (D$transformed.pow.obs.norm ~ ws30 + I(ws30^2)), data = D) #brilliant
transfit2 <- lm( (D$transformed.pow.obs.norm ~ I(ws30^2)), data = D ) #1. jeg har ladt disse to stå for at illustrere noget med residualerne
transfit3 <- lm( (D$transformed.pow.obs.norm ~ I(ws30^3)), data = D ) #2.
#transfitS <- lm( (D$transformed.pow.obs.norm ~ ws30 + I(ws30^2) + Season), data = D )
summary(transfit1)
summary(transfit12)
D$transformed.pred1 <- transfit1$coefficients[1] + transfit1$coefficients[2] * D$ws30
D$transformed.pred12 <- transfit12$coefficients[1] + transfit12$coefficients[2] * D$ws30 + transfit12$coefficients[3] * D$ws30^2
#D$transformed.predS <- transfitS$coefficients[1] + transfitS$coefficients[2] * D$ws30 + transfitS$coefficients[3] * D$ws30^2 + transfitS$coefficients[4] * D$Season
#summary(transfitS)
ggplot(data = D)+
geom_point(aes(x=ws30, y=transformed.pow.obs.norm, colour="Data"))+
geom_line(aes(x=ws30, y=transformed.pred1, colour="Model1"))+
geom_line(aes(x=ws30, y=transformed.pred12, colour="Model12"))+
#geom_line(aes(x=ws30, y=transformed.predS, colour="ModelS"))+
labs(x = "Wind speeds", y="Transformed, norm power obs", colour = "")
summary(lm( (D$transformed.pow.obs.norm ~ ws30 + I(ws30^2) + wd30), data = D)) #simply a check with the final model to make sure that wd still is irrelevant as regressor
par(mfrow=c(2,2))
plot(D$ws30, transfit1$residuals)
plot(D$ws30, transfit2$residuals)
plot(D$ws30, transfit3$residuals)
plot(D$ws30, transfit12$residuals)
D$base <- 1 #slide 15 for all of this
X <- as.matrix(data.frame(D$base, D$ws30, D$ws30^2))
Y <- D$transformed.pow.obs.norm
betas <- solve( (t(X)%*%X) ) %*% t(X) %*% Y
NLL.norm.lin <- function(p, regr1, regr2, response){
mu <- p[1] + p[2]*regr1 + p[3]*regr2
sigma <- sqrt( 1/length(response) * sum( (response - mu)^2  ) )
return( -sum( dnorm( x = response, mean = mu, sd = sigma, log = T ) )  )
}
norm.lin.par <- nlminb(c(1,1,1), objective = NLL.norm.lin, regr1 = D$ws30, regr2 = D$ws30^2, response = Y)
round( rbind(transfit12$coefficients,betas[1:3],norm.lin.par$par), digits=6)
y_p <- D$transformed.pred12
#y_pS <- D$transformed.predS
D$y_inv_trans <- 1/( exp(y_p*lambda)+1 )^(1/lambda) * exp(y_p)
#D$Season_inv_trans <- 1/( exp(y_pS*lambda)+1 )^(1/lambda) * exp(y_pS)
#D$Season <- 0
#D$Season[D$month > 5] <- 1
ggplot(data = D)+
geom_point(aes(x=ws30, y=pow.obs.norm))+
geom_line(aes(x=ws30, y=y_inv_trans, colour="Inv"))+
#geom_line(aes(x=ws30, y=Season_inv_trans, colour="InvS"))+
labs(x = "Wind speeds", y="Norm power obs", colour = "")+
theme_bw()
#scale_shape_manual(values = c(1:10))+
#scale_colour_manual(values = c("blue", "yellow", "black"))
plot(D$ws30, D$pow.obs.norm-D$y_inv_trans)
abline(h=0)
norm.lin.sds <- sqrt(diag(solve(hessian( func = NLL.norm.lin, x = norm.lin.par$par, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm ))))
Wald.CI.upper <- norm.lin.par$par + qnorm(0.975) * norm.lin.sds
Wald.CI.lower <- norm.lin.par$par - qnorm(0.975) * norm.lin.sds
cat("beta_0 = ", norm.lin.par$par[1], "95% CI [",Wald.CI.lower[1],", ",Wald.CI.upper[1],"]"
,"\nbeta_1 = ", norm.lin.par$par[2], "95% CI [",Wald.CI.lower[2],", ",Wald.CI.upper[2],"]"
,"\nbeta_2 = ", norm.lin.par$par[3], "95% CI [",Wald.CI.lower[3],", ",Wald.CI.upper[3],"]"
)
#Test regularity
# score.nll.norm <- function(theta, event, n, treatment){
#
#   beta0 <- theta[1]
#   beta1 <- theta[2]
#
#   theta <- exp(beta0 + beta1 * treatment)/(1 + exp(beta0 + beta1 * treatment))
#
#   score <- -sum(event/theta - (n - event)/(1 - theta))
#   return(score)
# }
#
#
# beta0.test.range <- seq(beta0.wald.CI[1], beta0.wald.CI[2], abs(0.01*beta0))
# beta1.test.range <- seq(beta1.wald.CI[1], beta1.wald.CI[2], abs(0.01*beta1))
#
# res0 <- apply(cbind(beta0.test.range, beta1), MARGIN = 1, FUN = score.nll.log, event = log.data$AIDS_yes, n = log.data$n, treatment = c(1,0))
#
# res1 <- apply(cbind(beta0, beta1.test.range), MARGIN = 1, FUN = score.nll.log, event = log.data$AIDS_yes, n = log.data$n, treatment = c(1,0))
#
# par(mfrow = c(1,2))
# plot(beta0.test.range, res0, main = "Score linearity for beta0"
#      ,xlab = "beta0", ylab = "Score", pch = 16)
# abline(lm(res0 ~ beta0.test.range), col = 2, lwd = 2)
# grid()
#
# plot(beta1.test.range, res1, main = "Score linearity for beta1"
#      ,xlab = "beta1", ylab = "Score", pch = 16)
# abline(lm(res1 ~ beta1.test.range), col = 2, lwd = 2)
# grid()
transfit12$coefficients
beta_0 <- transfit12$coefficients[1]
( offset_inv <- 1/( exp(beta_0*lambda)+1 )^(1/lambda) * exp(beta_0) )
NLL.norm.lin()
NLL.norm.lin
norm.lin.sds <- sqrt(diag(solve(hessian( func = NLL.norm.lin, x = norm.lin.par$par, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm ))))
Wald.CI.upper <- norm.lin.par$par + qnorm(0.975) * norm.lin.sds
Wald.CI.lower <- norm.lin.par$par - qnorm(0.975) * norm.lin.sds
cat("beta_0 = ", norm.lin.par$par[1], "95% CI [",Wald.CI.lower[1],", ",Wald.CI.upper[1],"]"
,"\nbeta_1 = ", norm.lin.par$par[2], "95% CI [",Wald.CI.lower[2],", ",Wald.CI.upper[2],"]"
,"\nbeta_2 = ", norm.lin.par$par[3], "95% CI [",Wald.CI.lower[3],", ",Wald.CI.upper[3],"]"
)
#Test regularity
score.nll.norm <- function(theta, regr1, regr2, response){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
theta <- beta0 + beta1 * regr1 + beta2 * regr2
sigma <- sqrt( 1/length(response) * sum( (reponse - theta)^2 ) )
score <- n/sigma^2 * (mean(response) - theta)#p. 213
return(-score)
}
beta0.test.range <- seq(Wald.CI.lower[1], Wald.CI.upper[1], abs(0.01*norm.lin.par$par[1]))
beta1.test.range <- seq(Wald.CI.lower[2], Wald.CI.upper[2], abs(0.01*norm.lin.par$par[2]))
beta2.test.range <- seq(Wald.CI.lower[3], Wald.CI.upper[3], abs(0.01*norm.lin.par$par[3]))
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
#Test regularity
score.nll.norm <- function(theta, regr1, regr2, response){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
theta <- beta0 + beta1 * regr1 + beta2 * regr2
sigma <- sqrt( 1/length(response) * sum( (response - theta)^2 ) )
score <- n/sigma^2 * (mean(response) - theta)#p. 213
return(-score)
}
beta0.test.range <- seq(Wald.CI.lower[1], Wald.CI.upper[1], abs(0.01*norm.lin.par$par[1]))
beta1.test.range <- seq(Wald.CI.lower[2], Wald.CI.upper[2], abs(0.01*norm.lin.par$par[2]))
beta2.test.range <- seq(Wald.CI.lower[3], Wald.CI.upper[3], abs(0.01*norm.lin.par$par[3]))
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res1 <- apply(cbind(norm.lin.par$par[1], beta1.test.range, norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
#Test regularity
score.nll.norm <- function(theta, regr1, regr2, response){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
n <- length(response)
theta <- beta0 + beta1 * regr1 + beta2 * regr2
sigma <- sqrt( 1/length(response) * sum( (response - theta)^2 ) )
score <- n/sigma^2 * (mean(response) - theta)#p. 213
return(-score)
}
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res1 <- apply(cbind(norm.lin.par$par[1], beta1.test.range, norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res2 <- apply(cbind(norm.lin.par$par[1], norm.lin.par$par[2], beta2.test.range), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
par(mfrow = c(1,3))
par(mfrow = c(1,3))
plot(beta0.test.range, res0, main = "Score linearity for beta0"
,xlab = "beta0", ylab = "Score", pch = 16)
res0
dim(res0)
score.nll.norm(norm.lin.par$par, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
norm.lin.sds <- sqrt(diag(solve(hessian( func = NLL.norm.lin, x = norm.lin.par$par, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm ))))
Wald.CI.upper <- norm.lin.par$par + qnorm(0.975) * norm.lin.sds
Wald.CI.lower <- norm.lin.par$par - qnorm(0.975) * norm.lin.sds
cat("beta_0 = ", norm.lin.par$par[1], "95% CI [",Wald.CI.lower[1],", ",Wald.CI.upper[1],"]"
,"\nbeta_1 = ", norm.lin.par$par[2], "95% CI [",Wald.CI.lower[2],", ",Wald.CI.upper[2],"]"
,"\nbeta_2 = ", norm.lin.par$par[3], "95% CI [",Wald.CI.lower[3],", ",Wald.CI.upper[3],"]"
)
#Test regularity
score.nll.norm <- function(theta, regr1, regr2, response){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
n <- length(response)
theta <- beta0 + beta1 * regr1 + beta2 * regr2
sigma <- sqrt( 1/length(response) * sum( (response - theta)^2 ) )
score <- n/sigma^2 * (mean(response) - theta)#p. 213
return(-sum(score))
}
beta0.test.range <- seq(Wald.CI.lower[1], Wald.CI.upper[1], abs(0.01*norm.lin.par$par[1]))
beta1.test.range <- seq(Wald.CI.lower[2], Wald.CI.upper[2], abs(0.01*norm.lin.par$par[2]))
beta2.test.range <- seq(Wald.CI.lower[3], Wald.CI.upper[3], abs(0.01*norm.lin.par$par[3]))
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res1 <- apply(cbind(norm.lin.par$par[1], beta1.test.range, norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res2 <- apply(cbind(norm.lin.par$par[1], norm.lin.par$par[2], beta2.test.range), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
par(mfrow = c(1,3))
plot(beta0.test.range, res0, main = "Score linearity for beta0"
,xlab = "beta0", ylab = "Score", pch = 16)
abline(lm(res0 ~ beta0.test.range), col = 2, lwd = 2)
grid()
plot(beta1.test.range, res1, main = "Score linearity for beta1"
,xlab = "beta1", ylab = "Score", pch = 16)
abline(lm(res1 ~ beta1.test.range), col = 2, lwd = 2)
grid()
plot(beta2.test.range, res2, main = "Score linearity for beta2"
,xlab = "beta2", ylab = "Score", pch = 16)
NLL.norm.lin
norm.lin.sds <- sqrt(diag(solve(hessian( func = NLL.norm.lin, x = norm.lin.par$par, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm ))))
Wald.CI.upper <- norm.lin.par$par + qnorm(0.975) * norm.lin.sds
Wald.CI.lower <- norm.lin.par$par - qnorm(0.975) * norm.lin.sds
cat("beta_0 = ", norm.lin.par$par[1], "95% CI [",Wald.CI.lower[1],", ",Wald.CI.upper[1],"]"
,"\nbeta_1 = ", norm.lin.par$par[2], "95% CI [",Wald.CI.lower[2],", ",Wald.CI.upper[2],"]"
,"\nbeta_2 = ", norm.lin.par$par[3], "95% CI [",Wald.CI.lower[3],", ",Wald.CI.upper[3],"]"
)
#Test regularity
score.nll.norm <- function(theta, regr1, regr2, response){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
n <- length(response)
theta <- beta0 + beta1 * regr1 + beta2 * regr2
sigma <- sqrt( 1/length(response) * sum( (response - theta)^2 ) )
score <- n/sigma^2 * (mean(response) - theta)#p. 213
return(-sum(score))
}
beta0.test.range <- seq(Wald.CI.lower[1], Wald.CI.upper[1], abs(0.01*norm.lin.par$par[1]))
beta1.test.range <- seq(Wald.CI.lower[2], Wald.CI.upper[2], abs(0.01*norm.lin.par$par[2]))
beta2.test.range <- seq(Wald.CI.lower[3], Wald.CI.upper[3], abs(0.01*norm.lin.par$par[3]))
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res1 <- apply(cbind(norm.lin.par$par[1], beta1.test.range, norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res2 <- apply(cbind(norm.lin.par$par[1], norm.lin.par$par[2], beta2.test.range), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
par(mfrow = c(1,3))
plot(beta0.test.range, res0, main = "Score linearity for beta0"
,xlab = "beta0", ylab = "Score", pch = 16)
abline(lm(res0 ~ beta0.test.range), col = 2, lwd = 2)
grid()
plot(beta1.test.range, res1, main = "Score linearity for beta1"
,xlab = "beta1", ylab = "Score", pch = 16)
abline(lm(res1 ~ beta1.test.range), col = 2, lwd = 2)
grid()
plot(beta2.test.range, res2, main = "Score linearity for beta2"
,xlab = "beta2", ylab = "Score", pch = 16)
abline(lm(res2 ~ beta2.test.range), col = 2, lwd = 2)
grid()
NLL.norm.lin
norm.lin.sds <- sqrt(diag(solve(hessian( func = NLL.norm.lin, x = norm.lin.par$par, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm ))))
Wald.CI.upper <- norm.lin.par$par + qnorm(0.975) * norm.lin.sds
Wald.CI.lower <- norm.lin.par$par - qnorm(0.975) * norm.lin.sds
cat("beta_0 = ", norm.lin.par$par[1], "95% CI [",Wald.CI.lower[1],", ",Wald.CI.upper[1],"]"
,"\nbeta_1 = ", norm.lin.par$par[2], "95% CI [",Wald.CI.lower[2],", ",Wald.CI.upper[2],"]"
,"\nbeta_2 = ", norm.lin.par$par[3], "95% CI [",Wald.CI.lower[3],", ",Wald.CI.upper[3],"]"
)
#Test regularity
score.nll.norm <- function(theta, regr1, regr2, response){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
n <- length(response)
theta <- beta0 + beta1 * regr1 + beta2 * regr2
sigma <- sqrt( 1/length(response) * sum( (response - theta)^2 ) )
score <- n/sigma^2 * (mean(response) - theta)#p. 213
return(-sum(score))
}
beta0.test.range <- seq(Wald.CI.lower[1], Wald.CI.upper[1], abs(0.001*norm.lin.par$par[1]))
beta1.test.range <- seq(Wald.CI.lower[2], Wald.CI.upper[2], abs(0.001*norm.lin.par$par[2]))
beta2.test.range <- seq(Wald.CI.lower[3], Wald.CI.upper[3], abs(0.001*norm.lin.par$par[3]))
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res1 <- apply(cbind(norm.lin.par$par[1], beta1.test.range, norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res2 <- apply(cbind(norm.lin.par$par[1], norm.lin.par$par[2], beta2.test.range), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
par(mfrow = c(1,3))
plot(beta0.test.range, res0, main = "Score linearity for beta0"
,xlab = "beta0", ylab = "Score", pch = 16)
abline(lm(res0 ~ beta0.test.range), col = 2, lwd = 2)
grid()
plot(beta1.test.range, res1, main = "Score linearity for beta1"
,xlab = "beta1", ylab = "Score", pch = 16)
abline(lm(res1 ~ beta1.test.range), col = 2, lwd = 2)
grid()
plot(beta2.test.range, res2, main = "Score linearity for beta2"
,xlab = "beta2", ylab = "Score", pch = 16)
abline(lm(res2 ~ beta2.test.range), col = 2, lwd = 2)
grid()
beta0.test.range
qqnorm(res0)
qqline
qqnorm(res0)
qqlin(res0)
qqline(res0)
norm.lin.sds <- sqrt(diag(solve(hessian( func = NLL.norm.lin, x = norm.lin.par$par, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm ))))
Wald.CI.upper <- norm.lin.par$par + qnorm(0.975) * norm.lin.sds
Wald.CI.lower <- norm.lin.par$par - qnorm(0.975) * norm.lin.sds
cat("beta_0 = ", norm.lin.par$par[1], "95% CI [",Wald.CI.lower[1],", ",Wald.CI.upper[1],"]"
,"\nbeta_1 = ", norm.lin.par$par[2], "95% CI [",Wald.CI.lower[2],", ",Wald.CI.upper[2],"]"
,"\nbeta_2 = ", norm.lin.par$par[3], "95% CI [",Wald.CI.lower[3],", ",Wald.CI.upper[3],"]"
)
#Test regularity
score.nll.norm <- function(theta, regr1, regr2, response){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
n <- length(response)
theta <- beta0 + beta1 * regr1 + beta2 * regr2
sigma <- sqrt( 1/length(response) * sum( (response - theta)^2 ) )
score <- n/sigma^2 * (mean(response) - theta)#p. 213
return(-sum(score))
}
beta0.test.range <- seq(Wald.CI.lower[1], Wald.CI.upper[1], abs(0.01*norm.lin.par$par[1]))
beta1.test.range <- seq(Wald.CI.lower[2], Wald.CI.upper[2], abs(0.01*norm.lin.par$par[2]))
beta2.test.range <- seq(Wald.CI.lower[3], Wald.CI.upper[3], abs(0.01*norm.lin.par$par[3]))
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res1 <- apply(cbind(norm.lin.par$par[1], beta1.test.range, norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res2 <- apply(cbind(norm.lin.par$par[1], norm.lin.par$par[2], beta2.test.range), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
par(mfrow = c(1,3))
plot(beta0.test.range, res0, main = "Score linearity for beta0"
,xlab = "beta0", ylab = "Score", pch = 16)
abline(lm(res0 ~ beta0.test.range), col = 2, lwd = 2)
grid()
plot(beta1.test.range, res1, main = "Score linearity for beta1"
,xlab = "beta1", ylab = "Score", pch = 16)
abline(lm(res1 ~ beta1.test.range), col = 2, lwd = 2)
grid()
plot(beta2.test.range, res2, main = "Score linearity for beta2"
,xlab = "beta2", ylab = "Score", pch = 16)
abline(lm(res2 ~ beta2.test.range), col = 2, lwd = 2)
grid()
cat("beta_0 = ", norm.lin.par$par[1], "95% CI [",Wald.CI.lower[1],", ",Wald.CI.upper[1],"]"
,"\nbeta_1 = ", norm.lin.par$par[2], "95% CI [",Wald.CI.lower[2],", ",Wald.CI.upper[2],"]"
,"\nbeta_2 = ", norm.lin.par$par[3], "95% CI [",Wald.CI.lower[3],", ",Wald.CI.upper[3],"]"
)
norm.lin.sds <- sqrt(diag(solve(hessian( func = NLL.norm.lin, x = norm.lin.par$par, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm ))))
Wald.CI.upper <- norm.lin.par$par + qnorm(0.975) * norm.lin.sds
Wald.CI.lower <- norm.lin.par$par - qnorm(0.975) * norm.lin.sds
cat("beta_0 = ", norm.lin.par$par[1], "95% CI [",Wald.CI.lower[1],", ",Wald.CI.upper[1],"]"
,"\nbeta_1 = ", norm.lin.par$par[2], "95% CI [",Wald.CI.lower[2],", ",Wald.CI.upper[2],"]"
,"\nbeta_2 = ", norm.lin.par$par[3], "95% CI [",Wald.CI.lower[3],", ",Wald.CI.upper[3],"]"
)
#Test regularity
score.nll.norm <- function(theta, regr1, regr2, response){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
n <- length(response)
theta <- beta0 + beta1 * regr1 + beta2 * regr2
sigma <- sqrt( 1/length(response) * sum( (response - theta)^2 ) )
score <- n/sigma^2 * (mean(response) - theta)#p. 213
return(-sum(score))
}
beta0.test.range <- seq(Wald.CI.lower[1], Wald.CI.upper[1], abs(0.01*norm.lin.par$par[1]))
beta1.test.range <- seq(Wald.CI.lower[2], Wald.CI.upper[2], abs(0.01*norm.lin.par$par[2]))
beta2.test.range <- seq(Wald.CI.lower[3], Wald.CI.upper[3], abs(0.01*norm.lin.par$par[3]))
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res1 <- apply(cbind(norm.lin.par$par[1], beta1.test.range, norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
res2 <- apply(cbind(norm.lin.par$par[1], norm.lin.par$par[2], beta2.test.range), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm)
par(mfrow = c(1,3))
plot(beta0.test.range, res0, main = "Score linearity for beta0"
,xlab = "beta0", ylab = "Score", pch = 16)
abline(lm(res0 ~ beta0.test.range), col = 2, lwd = 2)
grid()
plot(beta1.test.range, res1, main = "Score linearity for beta1"
,xlab = "beta1", ylab = "Score", pch = 16)
abline(lm(res1 ~ beta1.test.range), col = 2, lwd = 2)
grid()
plot(beta2.test.range, res2, main = "Score linearity for beta2"
,xlab = "beta2", ylab = "Score", pch = 16)
abline(lm(res2 ~ beta2.test.range), col = 2, lwd = 2)
grid()
head(res0)
res1
res0
res1
res2
length(res0)
length(res2)
len(beta0.test.range)
length(beta0.test.range)
length(beta2.test.range)
norm.lin.par$par
beta2.test.range <- seq(Wald.CI.lower[3], Wald.CI.upper[3], abs(0.01*norm.lin.par$par[3]))
length(beta2.test.range)
NLL.norm.lin
sigma.s <- sqrt( 1/dim(D)[1] * sum ( (D$transformed.pow.obs.norm - ( norm.lin.par$par[1] + norm.lin.par$par[2] * D$ws30 + norm.lin.par$par[3] * D$ws30^2) )^2 ) )
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm, sigma = sigma.s)
#Test regularity
score.nll.norm <- function(theta, regr1, regr2, response, sigma){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
n <- length(response)
theta <- beta0 + beta1 * regr1 + beta2 * regr2
#sigma <- sqrt( 1/length(response) * sum( (response - theta)^2 ) )
score <- n/sigma^2 * (mean(response) - theta)#p. 213
return(-sum(score))
}
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm, sigma = sigma.s)
plot(beta0.test.range, res0, main = "Score linearity for beta0"
,xlab = "beta0", ylab = "Score", pch = 16)
norm.lin.sds <- sqrt(diag(solve(hessian( func = NLL.norm.lin, x = norm.lin.par$par, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm ))))
Wald.CI.upper <- norm.lin.par$par + qnorm(0.975) * norm.lin.sds
Wald.CI.lower <- norm.lin.par$par - qnorm(0.975) * norm.lin.sds
cat("beta_0 = ", norm.lin.par$par[1], "95% CI [",Wald.CI.lower[1],", ",Wald.CI.upper[1],"]"
,"\nbeta_1 = ", norm.lin.par$par[2], "95% CI [",Wald.CI.lower[2],", ",Wald.CI.upper[2],"]"
,"\nbeta_2 = ", norm.lin.par$par[3], "95% CI [",Wald.CI.lower[3],", ",Wald.CI.upper[3],"]"
)
#Test regularity
score.nll.norm <- function(theta, regr1, regr2, response, sigma){
beta0 <- theta[1]
beta1 <- theta[2]
beta2 <- theta[3]
n <- length(response)
theta <- beta0 + beta1 * regr1 + beta2 * regr2
#sigma <- sqrt( 1/length(response) * sum( (response - theta)^2 ) )
score <- n/sigma^2 * (mean(response) - theta)#p. 213
return(-sum(score))
}
beta0.test.range <- seq(Wald.CI.lower[1], Wald.CI.upper[1], abs(0.01*norm.lin.par$par[1]))
beta1.test.range <- seq(Wald.CI.lower[2], Wald.CI.upper[2], abs(0.01*norm.lin.par$par[2]))
beta2.test.range <- seq(Wald.CI.lower[3], Wald.CI.upper[3], abs(0.01*norm.lin.par$par[3]))
sigma.s <- sqrt( 1/dim(D)[1] * sum ( (D$transformed.pow.obs.norm - ( norm.lin.par$par[1] + norm.lin.par$par[2] * D$ws30 + norm.lin.par$par[3] * D$ws30^2) )^2 ) )
res0 <- apply(cbind(beta0.test.range, norm.lin.par$par[2], norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm, sigma = sigma.s)
res1 <- apply(cbind(norm.lin.par$par[1], beta1.test.range, norm.lin.par$par[3]), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm, sigma = sigma.s)
res2 <- apply(cbind(norm.lin.par$par[1], norm.lin.par$par[2], beta2.test.range), MARGIN = 1, FUN = score.nll.norm, regr1 = D$ws30, regr2 = D$ws30^2, response = D$transformed.pow.obs.norm, sigma = sigma.s)
par(mfrow = c(1,3))
plot(beta0.test.range, res0, main = "Score linearity for beta0"
,xlab = "beta0", ylab = "Score", pch = 16)
abline(lm(res0 ~ beta0.test.range), col = 2, lwd = 2)
grid()
plot(beta1.test.range, res1, main = "Score linearity for beta1"
,xlab = "beta1", ylab = "Score", pch = 16)
abline(lm(res1 ~ beta1.test.range), col = 2, lwd = 2)
grid()
plot(beta2.test.range, res2, main = "Score linearity for beta2"
,xlab = "beta2", ylab = "Score", pch = 16)
abline(lm(res2 ~ beta2.test.range), col = 2, lwd = 2)
grid()
sigma.s
NLL.norm.lin()
NLL.norm.lin
summary(norm.lin.par)
summary(transfit12)
sigma.s
NLL.norm.lin
transfit12$residuals
transfit12$coefficients
transfit12$df.residual
sd(transfit12)
transfit12$effects
transfit12$model
transfit12$coefficients
transfit12$rank
transfit12$fitted.values
transfit12$assign
summary(transfit12)
sigma.s
sigma.s
